print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=9
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=10
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
i=11
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
i=1
#for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/svm_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
i=1
#for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
i=1
#for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
i=1
#for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
#}
i=2
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
paste(preds[1,])
paste(as.character(preds[1,]),collapse=",")
as.character(preds[1,]
)
preds
print(as.character(preds[n2,n]))
for (n in ncol(preds)){
for (n2 in nrow(preds)){
print(as.character(preds[n2,n]))
}
}
ncol(preds)
nrow(preds)
for (n in ncol(preds)){
for (n2 in nrow(preds)){
print(as.character(preds[n2,n]))
}
}
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
print(as.character(preds[n2,n]))
}
}
predictors = vector()
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
print(as.character(preds[n2,n]))
predictors <- paste(predictors,collapse=",")
}
}
predictors
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
print(as.character(preds[n2,n]))
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
preds
predictors
uniquepredictors <- unique(predictors)
predict_radial_full <- function(modeldata,dependent,predictors,doreturn=FALSE,kappasum=FALSE,tausum=FALSE,printpreds=TRUE){
require(e1071)
mymodeldata <- modeldata[c(dependent,predictors)]
f <- paste(dependent,"~.")
fit <- do.call("svm",list(as.formula(f),mymodeldata,cross=10,kernel="radial"))
cverror = 1-(fit$tot.accuracy)/100
print(paste("10fold cv-error: ",cverror))
if(printpreds==TRUE){print(paste("For predictors",paste(predictors,collapse=" AND ")))
preds <- predict(fit,mymodeldata)
CM <- table(preds,mymodeldata[[dependent]])
print(CM)
print(paste("Kappa overall = ",kappa(CM)$sum.kappa))
if(kappasum==T) print(summary.kappa(kappa(CM)))
print(paste("Tau overall = ",tau(CM)$tau))
if(tausum == T) print(summary.tau(tau(CM)))
print(paste("The quality is ",quality(CM)))
print(paste("#########  Cramer's V = ",Cramer(CM)))
if(doreturn==TRUE) return(preds)
}
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
predict_radial_full <- function(modeldata,dependent,predictors,doreturn=FALSE,kappasum=FALSE,tausum=FALSE,printpreds=TRUE){
require(e1071)
mymodeldata <- modeldata[c(dependent,predictors)]
f <- paste(dependent,"~.")
fit <- do.call("svm",list(as.formula(f),mymodeldata,cross=10,kernel="radial"))
cverror = 1-(fit$tot.accuracy)/100
print(paste("10fold cv-error: ",cverror))
if(printpreds==TRUE){print(paste("For predictors",paste(predictors,collapse=" AND ")))}
preds <- predict(fit,mymodeldata)qqq
CM <- table(preds,mymodeldata[[dependent]])
print(CM)
print(paste("Kappa overall = ",kappa(CM)$sum.kappa))
if(kappasum==T) print(summary.kappa(kappa(CM)))
print(paste("Tau overall = ",tau(CM)$tau))
if(tausum == T) print(summary.tau(tau(CM)))
print(paste("The quality is ",quality(CM)))
print(paste("#########  Cramer's V = ",Cramer(CM)))
if(doreturn==TRUE) return(preds)
}
predict_radial_full <- function(modeldata,dependent,predictors,doreturn=FALSE,kappasum=FALSE,tausum=FALSE,printpreds=TRUE){
require(e1071)
mymodeldata <- modeldata[c(dependent,predictors)]
f <- paste(dependent,"~.")
fit <- do.call("svm",list(as.formula(f),mymodeldata,cross=10,kernel="radial"))
cverror = 1-(fit$tot.accuracy)/100
print(paste("10fold cv-error: ",cverror))
if(printpreds==TRUE){print(paste("For predictors",paste(predictors,collapse=" AND ")))}
preds <- predict(fit,mymodeldata)
CM <- table(preds,mymodeldata[[dependent]])
print(CM)
print(paste("Kappa overall = ",kappa(CM)$sum.kappa))
if(kappasum==T) print(summary.kappa(kappa(CM)))
print(paste("Tau overall = ",tau(CM)$tau))
if(tausum == T) print(summary.tau(tau(CM)))
print(paste("The quality is ",quality(CM)))
print(paste("#########  Cramer's V = ",Cramer(CM)))
if(doreturn==TRUE) return(preds)
}
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors,printpreds = FALSE)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep="")
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
View(predict_ranfor_full)
View(predict_radial_full)
modeldata=origmodeldata
dependent=dep
predictors=predictors
kappasum = F
tausum = F
require(randomForest)
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,paramsets[[pset]])]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=1,kappasum = F,tausum = F)
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F)
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata)
View(evaluateforwardCV_anyerror)
View(evaluatepredictors_radial_newlegend)
View(evaluateforwardCV_anyerror)
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
load('../data/dependentlists.RData')
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[6]),printpreds = FALSE)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
i=1
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
print(preds)
preds
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata)
View(importance_ranfor_pset)
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata)
i=1
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_localterrain/RFwithgeoandgeom_fw_5fold_6p_",dep,"_localterrain",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
print(preds)
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=1,altdata=origmodeldata)
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=1,kappasum = F,tausum = F,altdata=origmodeldata)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=1,kappasum = F,tausum = F,altdata=origmodeldata)
}
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_localterrain/RFwithgeoandgeom_fw_5fold_6p_",dep,"_localterrain",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
print(preds)
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=1,altdata=origmodeldata)
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=1,kappasum = F,tausum = F,altdata=origmodeldata)
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=6,kappasum = F,tausum = F,altdata=origmodeldata)
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=1,altdata=origmodeldata)
altdata=origmodeldata
pset=1
dependent=dep
modeldata=origmodeldata
View(importance_ranfor_pset)
require(randomForest)
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,paramsets[[pset]])]))
na.omit(modeldata[c(dependent,paramsets[[pset]])])
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
dep=dependentlist[i]
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata)
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=1,altdata=origmodeldata)
modeldata[paramsets[[1]]]
paramsets[[pset]]
pset=1
modeldata[paramsets[[1]]]
paramsets[[pset]]
c(dependent,paramsets[[pset]]
)
na.omit(modeldata[c(dependent,paramsets[[pset]])])
na.omit(origmodeldata[c(dependent,paramsets[[pset]])])
modeldata=origmodeldata
dependent=dep
predictors=predictors
pset=1
altdata=origmodeldata
predictors = unlist(paramsets[[pset]])
length(paramsets[[pset]])
predictors = predictors[predictors %in% names(modeldata)]
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictors)]))
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance$parameters <- row.names(importance)
importance
fullmodel$importance
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictors)]),importance=T)
fullmodel$importance
importance <- as.data.frame(fullmodel$importance)
importance$parameters <- row.names(importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
importance
print(importance[1:10,"MeanDecreaseAccuracy"])
print(importance[1:10,c(MeanDecreaseGini","MeanDecreaseAccuracy"])
print(importance[1:10,c("MeanDecreaseGini","MeanDecreaseAccuracy"])
print(importance[1:10,c("MeanDecreaseGini","MeanDecreaseAccuracy")])
withalt=TRUE
ttt <- function(modeldata,dependent,pset,altdata,withalt=TRUE){
require(randomForest)
predictors = unlist(paramsets[[pset]])
predictors = predictors[predictors %in% names(modeldata)]
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictors)]))
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance$parameters <- row.names(importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
print(importance[1:10,c("MeanDecreaseGini","MeanDecreaseAccuracy")])
if(withalt=TRUE){
altmodeldata <- na.omit(altdata[c(dependent,predictors)])
altpreddata<-altmodeldata[paramsets[[pset]]]
altpreds <- predict(fullmodel,altpreddata)
ACM <- table(altpreds, altmodeldata[[dependent]])
print(ACM)
print(paste("classification error rate with altdata: ",mean(altpreds != altmodeldata[[dependent]])))
}
}
ttt <- function(modeldata,dependent,pset,altdata,withalt=TRUE){
require(randomForest)
predictors = unlist(paramsets[[pset]])
predictors = predictors[predictors %in% names(modeldata)]
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictors)]))
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance$parameters <- row.names(importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
print(importance[1:10,c("MeanDecreaseGini","MeanDecreaseAccuracy")])
if(withalt=TRUE){
ttt <- function(modeldata,dependent,pset,altdata,withalt=TRUE){
require(randomForest)
predictors = unlist(paramsets[[pset]])
predictors = predictors[predictors %in% names(modeldata)]
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictors)]))
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance$parameters <- row.names(importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
print(importance[1:10,c("MeanDecreaseGini","MeanDecreaseAccuracy")])
if(withalt==TRUE){
altmodeldata <- na.omit(altdata[c(dependent,predictors)])
altpreddata<-altmodeldata[paramsets[[pset]]]
altpreds <- predict(fullmodel,altpreddata)
ACM <- table(altpreds, altmodeldata[[dependent]])
print(ACM)
print(paste("classification error rate with altdata: ",mean(altpreds != altmodeldata[[dependent]])))
}
}
ttt(modeldata=origmodeldata,dependent = dep,pset=1,altdata = origmodeldata,withal=T)
ttt <- function(modeldata,dependent,pset,altdata,withalt=TRUE){
require(randomForest)
predictors = unlist(paramsets[[pset]])
predictors = predictors[predictors %in% names(modeldata)]
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictors)]),importance=T)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance$parameters <- row.names(importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
print(importance[1:10,c("MeanDecreaseGini","MeanDecreaseAccuracy")])
if(withalt==TRUE){
altmodeldata <- na.omit(altdata[c(dependent,predictors)])
altpreddata<-altmodeldata[paramsets[[pset]]]
altpreds <- predict(fullmodel,altpreddata)
ACM <- table(altpreds, altmodeldata[[dependent]])
print(ACM)
print(paste("classification error rate with altdata: ",mean(altpreds != altmodeldata[[dependent]])))
}
}
ttt(modeldata=origmodeldata,dependent = dep,pset=1,altdata = origmodeldata,withal=T)
ttt <- function(modeldata,dependent,pset,altdata,withalt=TRUE){
require(randomForest)
predictors = unlist(paramsets[[pset]])
predictors = predictors[predictors %in% names(modeldata)]
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictors)]),importance=T)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance$parameters <- row.names(importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
print(importance[1:10,c("MeanDecreaseGini","MeanDecreaseAccuracy")])
if(withalt==TRUE){
altmodeldata <- na.omit(altdata[c(dependent,predictors)])
altpreddata<-altmodeldata[predictors]
altpreds <- predict(fullmodel,altpreddata)
ACM <- table(altpreds, altmodeldata[[dependent]])
print(ACM)
print(paste("classification error rate with altdata: ",mean(altpreds != altmodeldata[[dependent]])))
}
}
ttt(modeldata=origmodeldata,dependent = dep,pset=1,altdata = origmodeldata,withal=T)
ttt(modeldata=origmodeldata,dependent = dep,pset=1,altdata = origmodeldata,withalt=T)
ttt(modeldata=origmodeldata,dependent = dep,pset=1,altdata = origmodeldata,withalt=F)
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_localterrain/RFwithgeoandgeom_fw_5fold_6p_",dep,"_localterrain",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
print(preds)
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=1,altdata=origmodeldata,withalt=F)
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=1,kappasum = F,tausum = F,altdata=origmodeldata)
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_localterrain/RFwithgeoandgeom_fw_5fold_6p_",dep,"_localterrain",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
print(preds)
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=1,altdata=origmodeldata,withalt=F)
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=1,kappasum = F,tausum = F,altdata=origmodeldata)
View(predict_ranfor_full)
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
View(predict_ranfor_full)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_localterrain/RFwithgeoandgeom_fw_5fold_6p_",dep,"_localterrain",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=1,altdata=origmodeldata,withalt=F)
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=1,kappasum = F,tausum = F,altdata=origmodeldata)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=1,kappasum = F,tausum = F,altdata=origmodeldata)
