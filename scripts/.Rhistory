require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(17,41,11,31)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(16,37,11,36)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(6,36,14,44)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
##PROFIL 1 von Martin Thalheimer
##  Horizont Ap1
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
##  Horizont Ap2
portions <- c(17,41,11,31)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
##  Horizont Ap3
portions <- c(16,37,11,36)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
##  Horizont C
portions <- c(6,36,14,44)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
View(schluff_oe)
portions <- c(11,43,10,36)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
##PROFIL 1 von Martin Thalheimer
portions <- c(11,43,10,36)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(10,44,10,36)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(5,29,11,55)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(13,49,12,26)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
t <- load("../data/modeldata/SVMorigmodeldatawithgeo_Leben_Tr.RData"
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
gf
evaluateforwardCV_anyerror(mypath=paste(proj3path,"/data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_10",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
evaluateforwardCV_anyerror(mypath=paste(proj3path,"/data/FSCV/RF_geoandgeom/RFwithgeo_fw_5fold_10p_Leben_Tr_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
evaluateforwardCV_anyerror(mypath=paste(proj3path,"/data/FSCV/RF_geoandgeom/RFwithgeo_fw_5fold_10p_Leben_Tr_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
paste(proj3path,"/data/FSCV/RF_geoandgeom/RFwithgeo_fw_5fold_10p_Leben_Tr_allpreds"
,sep="")
/home/fabs/PROJECTP3/data/FSCV/RF_geoandgeom
evaluateforwardCV_anyerror(mypath=paste(proj3path,"/data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_Leben_Tr_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
load("../data/modeldata/RForigmodeldatawithgeo_Leben_Tr.RData")
predict_ranfor_full(modeldata=origmodeldata, dependent=dependent, predictors=unlist(paramsets[5]),pset=5,altdata=origmodeldata)
importance_ranfor_pset(modeldata=origmodeldata, dependent=dependent,pset = 5,altdata=origmodeldata)
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
dependentlist=names(preppeddata)[36:50]
dependlist
dependentlist
dependentlist_eng <- c("1a.2.1 - Potential as a habitat for drought-tolerant species",
"1a.2.2 - Potential as a habitat for moisture-tolerant species",
"1a.3 - Habitat for soil organisms",
"1a.4 - Habitat for crops",
"1c.1 - Average precipitation retention capacity",
"1c.1 - Minimum precipitation retention capacity",
"1c.2 - Retention capacity for heavy precipitation events",
"1c.3 - groundwater reformation rate",
"1c.4 - Potential for providing nutrients for plants",
"1c.5 - Potential as a CO2 sink",
"1d.1 - Potential for retention of heavy metals",
"1d.2 - Potential for transforming organic contaminants",
"1d.3 - Potential as filter and buffer for organic contaminants",
"1d.4 - Potential for retention of water-soluble contaminants",
"1d.5 - Potential as buffer for acidic contaminants")
save(dependentlist,dependentlist_eng,file="dependentlists.RData")
getwd()
load('../data/dependentlists.RData')
dep=dependlist[1]
dep=dependentlist[1]
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
load('../data/dependentlists.RData')
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
i=1
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
View(evaluateforwardCV_anyerror)
View(evaluatepredictors_radial_newlegend)
View(predict_radial_full)
View(evaluateforwardCV_anyerror)
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
preds
summary(preds)
unique(preds[1,])
length(unique(preds[1,]))
predictors <- c(preds[1,1],preds[2,1])
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
c(preds[1,1],preds[2,1])
preds
preds[1,1]
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
print(dependentlist_eng[i])
i=1
for(i in 1:length(dependlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=2
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=2
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
i=2
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=2
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=3
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=4
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=5
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=6
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=7
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=8
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=9
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
i=10
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
i=11
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
i=1
#for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/svm_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
i=1
#for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
i=1
#for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
i=1
#for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors)
rm(origmodeldata,paramsets,paramsetnames,dependent)
#}
i=2
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
paste(preds[1,])
paste(as.character(preds[1,]),collapse=",")
as.character(preds[1,]
)
preds
print(as.character(preds[n2,n]))
for (n in ncol(preds)){
for (n2 in nrow(preds)){
print(as.character(preds[n2,n]))
}
}
ncol(preds)
nrow(preds)
for (n in ncol(preds)){
for (n2 in nrow(preds)){
print(as.character(preds[n2,n]))
}
}
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
print(as.character(preds[n2,n]))
}
}
predictors = vector()
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
print(as.character(preds[n2,n]))
predictors <- paste(predictors,collapse=",")
}
}
predictors
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
print(as.character(preds[n2,n]))
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
preds
predictors
uniquepredictors <- unique(predictors)
predict_radial_full <- function(modeldata,dependent,predictors,doreturn=FALSE,kappasum=FALSE,tausum=FALSE,printpreds=TRUE){
require(e1071)
mymodeldata <- modeldata[c(dependent,predictors)]
f <- paste(dependent,"~.")
fit <- do.call("svm",list(as.formula(f),mymodeldata,cross=10,kernel="radial"))
cverror = 1-(fit$tot.accuracy)/100
print(paste("10fold cv-error: ",cverror))
if(printpreds==TRUE){print(paste("For predictors",paste(predictors,collapse=" AND ")))
preds <- predict(fit,mymodeldata)
CM <- table(preds,mymodeldata[[dependent]])
print(CM)
print(paste("Kappa overall = ",kappa(CM)$sum.kappa))
if(kappasum==T) print(summary.kappa(kappa(CM)))
print(paste("Tau overall = ",tau(CM)$tau))
if(tausum == T) print(summary.tau(tau(CM)))
print(paste("The quality is ",quality(CM)))
print(paste("#########  Cramer's V = ",Cramer(CM)))
if(doreturn==TRUE) return(preds)
}
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
predict_radial_full <- function(modeldata,dependent,predictors,doreturn=FALSE,kappasum=FALSE,tausum=FALSE,printpreds=TRUE){
require(e1071)
mymodeldata <- modeldata[c(dependent,predictors)]
f <- paste(dependent,"~.")
fit <- do.call("svm",list(as.formula(f),mymodeldata,cross=10,kernel="radial"))
cverror = 1-(fit$tot.accuracy)/100
print(paste("10fold cv-error: ",cverror))
if(printpreds==TRUE){print(paste("For predictors",paste(predictors,collapse=" AND ")))}
preds <- predict(fit,mymodeldata)qqq
CM <- table(preds,mymodeldata[[dependent]])
print(CM)
print(paste("Kappa overall = ",kappa(CM)$sum.kappa))
if(kappasum==T) print(summary.kappa(kappa(CM)))
print(paste("Tau overall = ",tau(CM)$tau))
if(tausum == T) print(summary.tau(tau(CM)))
print(paste("The quality is ",quality(CM)))
print(paste("#########  Cramer's V = ",Cramer(CM)))
if(doreturn==TRUE) return(preds)
}
predict_radial_full <- function(modeldata,dependent,predictors,doreturn=FALSE,kappasum=FALSE,tausum=FALSE,printpreds=TRUE){
require(e1071)
mymodeldata <- modeldata[c(dependent,predictors)]
f <- paste(dependent,"~.")
fit <- do.call("svm",list(as.formula(f),mymodeldata,cross=10,kernel="radial"))
cverror = 1-(fit$tot.accuracy)/100
print(paste("10fold cv-error: ",cverror))
if(printpreds==TRUE){print(paste("For predictors",paste(predictors,collapse=" AND ")))}
preds <- predict(fit,mymodeldata)
CM <- table(preds,mymodeldata[[dependent]])
print(CM)
print(paste("Kappa overall = ",kappa(CM)$sum.kappa))
if(kappasum==T) print(summary.kappa(kappa(CM)))
print(paste("Tau overall = ",tau(CM)$tau))
if(tausum == T) print(summary.tau(tau(CM)))
print(paste("The quality is ",quality(CM)))
print(paste("#########  Cramer's V = ",Cramer(CM)))
if(doreturn==TRUE) return(preds)
}
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors,printpreds = FALSE)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
