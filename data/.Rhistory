boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
unlist(paramsets[5]) %in% relevantmodeldata
unlist(paramsets[5]) %in% names(relevantmodeldata)
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file="/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
names(modeldataoktober)[1:50]
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 2,dependent = dependent)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
predict_ranfor_full(modeldata = relevantmodeldata,pset = 5,dependent = dependent,predictors = )
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
View(increaseacc)
modeldata = relevantmodeldata
pset = 5
dependent = dependent
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,paramsets[[pset]])]),importance=TRUE)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
View(importance)
View(increaseacc)
require(knitr)
kable(importance)
kable(importance)
View(importance_ranfor_pset_newlegend)
View(increaseacc)
View(increaseacc)
View(increaseacc)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file="/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
View(increaseacc)
View(increaseacc)
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,paramsets[[pset]])]),importance=TRUE)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
kable(importance[1:10,])
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
View(increaseacc)
View(increaseacc)
modeldata = relevantmodeldata
pset = 5
dependent = dependent
View(increaseacc)
View(increaseacc)
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,paramsets[[pset]])]),importance=TRUE)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
kable(importance[1:10,])
kable(as.data.frame(importance[1:10,]))
kable(as.data.frame(importance[1:10,]))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file="/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file="/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
kable(as.data.frame(importance[1:10,]))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
paper2datapath ="/home/fabs/Data/paper2data/"
load(file=paste(paper2datapath,"/sampledata_100mgrid.RData",sep="")
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file=paste(paper2datapath,"/sampledata_100mgrid.RData",sep=""))
cl1= "SB"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
cl1="SB"
cl2="TG"
dependent="SGU_kartiert"
relevantmodeldata <- modeldataoktober[modeldataoktober$SGU_kartiert %in% c(cl1,cl2),]
relevantmodeldata$SGU_kartiert <- droplevels(relevantmodeldata$SGU_kartiert)
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesroughnessp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesiteslocalterrainp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
boxplot(data=relevantmodeldata[c("TRI_hr_ws43",dependent)],as.formula(paste("TRI_hr_ws43","~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
cl1="SB"
cl2="TG"
dependent="geolegen_1"
relevantmodeldata <- sampledata[sampledata$geolegen_1 %in% c(cl1,cl2),]
relevantmodeldata$geolegen_1<- as.factor(relevantmodeldata$geolegen_1)
#evaluateforwardCV_anyerror(mypath = paste("/home/fabs/PROJECTP2/data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesroughnessp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),"SGU_kartiert")],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),"SGU_kartiert")],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
paper2datapath ="/media/fabs/Volume/01_PAPERZEUG/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernsSDruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernsSDruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
myfunctions <- getURL("https://raw.githubusercontent.com/fernsSDruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
#proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
#paper2datapath ="/media/fabs/Volume/01_PAPERZEUG/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
?barplot
load("/home/fabs/PROJECTP2/data2017/boden_SGU_Oct5.RData")
barplot(boden_SGU$TYP)
barplot(table(boden_SGU$TYP))
barplot(table(boden_SGU$TYP),las=2)
barplot(table(boden_SGU$TYP),las=2,cex.names=0.5)
barplot(table(boden_SGU$TYP),las=2,cex.names=0.5,ylim=c(0,200))
svg("/home/fabs/PROJECTP2/figure/studyarea_statistics/barplot_bodentypen.svg")
barplot(table(boden_SGU$TYP),las=2,cex.names=0.5,ylim=c(0,200))
dev.off()
load(paste(proj2path,"data2017/modeldata_SGUkartier.RData"))
load(paste(proj2path,"data2017/modeldata_SGUkartier.RData",sep=""))
paste(proj2path,"data2017/modeldata_SGUkartier.RData",sep="")
load(paste(proj2path,"data2017/modeldata_SGUkartiert.RData",sep=""))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
View(modeldataoktober)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
View(boden_SGU)
View(boden_SGU)
load("/home/fabs/Data/paper2data/profiledata.RData")
names(profiledata)
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="SGU_kartiert"
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(profiledata)])
nadata <- na.omit(profiledata)
problempunkte <- profiledata[!(profiledata$ID %in% nadata$ID),]
profiledata <- profiledata[profiledata$ID != "12884", ]
profiledata <- profiledata[!(profiledata[[dependent]] %in% c("MrD")),]
names(profiledata)
modelpointIDs <- profiledata$ID
modelpointIDs
bodenSGUIDs <- boden_SGU$ID
bodenSGUIDs
save(bodenSGUIDs,modelpointIDs,file="/home/fabs/PROJECTP2/data2017/pointIDs.RData")
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData"))
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData"))
load(paste(proj2path,"data2017/pointIDs.RData"))
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData",sep=""))
load(paste(proj2path,"data2017/pointIDs.RData",sep=""))
require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
library(knitr)
#proj2path="/home/fabs/PROJECTP2/"
#paper2datapath ="/home/fabs/Data/paper2data/"
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
paper2datapath ="/media/fabs/Volume/01_PAPERZEUG/paper2data/"
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData",sep=""))
load(paste(proj2path,"data2017/pointIDs.RData",sep=""))
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData",sep=""))
load(paste(proj2path,"data2017/pointIDs.RData",sep=""))
View(boden_SGU)
boden_SGU[boden_SGU$ID == "32",]
boden_SGU[boden_SGU$ID == 32,]
boden_SGU[boden_SGU$ID == "32",]
boden_SGU[boden_SGU$ID == "32"]
boden_SGU[boden_SGU$ID == "32",]
str(boden_SGU)
boden_SGU[boden_SGU$ID %in% c("32"),]
boden_SGU[boden_SGU$ID == 33,]
boden_SGU[boden_SGU$ID == 33,]
boden_SGU[boden_SGU$ID == 34,]
boden_SGU[boden_SGU$ID == 35,]
boden_SGU[boden_SGU$ID == 36,]
boden_SGU[boden_SGU$ID == 42,]
boden_SGU[boden_SGU$ID == 48,]
boden_SGU[boden_SGU$ID == 51,]
boden_SGU[boden_SGU$ID == 53,]
boden_SGU[boden_SGU$ID == 54,]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
setwd(paste(proj3path,"/data/",sep=""))
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
for (dependent in dependentlist){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
psets <- c(5)
classes <-  levels(origmodeldata[[dependent]])
#save(classes,paramsets,modeldata,paramsetnames,file="classesandparamsets.RData")
paramsetnames = paramsetnames[psets]
paramsets = paramsets[psets]
n=1
p=paramsets[1]
View(mdata)
}
names(preppeddata)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
setwd(paste(proj3path,"/data/",sep=""))
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
###################################################################################################################################################
###################################################################################################################################################
proj2path="/home/fabs/PROJECTP2/"
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws57")
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
names(legend) <- c("SGU","SGUcode")
dependent="SGU_kartiert"
modelcols <- c(dependent,predictors)
modeldataoktober <- merge(modeldataoktober,legend,by.x="SGU_gk",by.y="SGU")
modeldata <- modeldataoktober[c(modelcols)]
modeldata$SGUcode <- factor(modeldata$SGUcode,levels=1:15)
f <- paste(dependent,"~.")
fit <- do.call("randomForest",list(as.formula(f),modeldata,cross=10))
fit$confusion
fit$err.rate[nrow(fit$err.rate),1]
modeldata[["preds"]] <- predict(fit,newdata=modeldata)
modeldata
View(modeldata)
write.table(modeldata, file="/home/fabs/PROJECTP3/data/modeled_parentmaterial_frompaper2.txt",sep="\t") ##FÜR DAS DRITTE PAPER!
parentmaterial <- read.table("/home/fabs/PROJECTP3/data/modeled_parentmaterial_frompaper2.txt",sep="\t",header=T)
names(parentmaterial)
head(parentmaterial)
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
###################################################################################################################################################
###################################################################################################################################################
proj2path="/home/fabs/PROJECTP2/"
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws57")
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
require(e1071)
require(randomForest)
require(rgdal)
require(rgrass7)
###################################################################################################################################################
###################################################################################################################################################
proj2path="/home/fabs/PROJECTP2/"
predictors <- c("SGUcode","TRI_hr_ws31","vectorruggedness_hr_ws57")
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
View(modeldataoktober)
