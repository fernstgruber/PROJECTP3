require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(17,41,11,31)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(16,37,11,36)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(6,36,14,44)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
##PROFIL 1 von Martin Thalheimer
##  Horizont Ap1
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
##  Horizont Ap2
portions <- c(17,41,11,31)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
##  Horizont Ap3
portions <- c(16,37,11,36)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
##  Horizont C
portions <- c(6,36,14,44)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
View(schluff_oe)
portions <- c(11,43,10,36)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
##PROFIL 1 von Martin Thalheimer
portions <- c(11,43,10,36)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(10,44,10,36)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(5,29,11,55)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
portions <- c(13,49,12,26)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
t <- load("../data/modeldata/SVMorigmodeldatawithgeo_Leben_Tr.RData"
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
gf
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
t <- load("../data/modeldata/SVMorigmodeldatawithgeo_Leben_Tr.RData"
t <- load("../data/modeldata/SVMorigmodeldatawithgeo_Leben_Tr.RData")
predict_radial_full(modeldata=origmodeldata,dependent=dependent,predictors=paramsets[5])
View(predict_radial_full)
predict_radial_full(modeldata=origmodeldata, dependent=dependent, predictors=unlist(paramsets[5]))
View(importance_ranfor_pset)
importance_ranfor_pset(modeldata=origmodeldata, dependent=dependent,pset = 5,altdata=modeldata)
importance_ranfor_pset(modeldata=origmodeldata, dependent=dependent,pset = 5,altdata=origmodelmodeldata)
load("../data/modeldata/RForigmodeldatawithgeo_Leben_Tr.RData")
predict_ranfor_full(modeldata=origmodeldata, dependent=dependent, predictors=unlist(paramsets[5]))
importance_ranfor_pset(modeldata=origmodeldata, dependent=dependent,pset = 5,altdata=origmodelmodeldata)
View(importance_ranfor_pset)
modeldata=origmodeldata
dependent=dependent
predictors=unlist(paramsets[5])
altdata=origmodelmodeldata
importance_ranfor_pset(modeldata=origmodeldata, dependent=dependent,pset = 5,altdata=origmodeldata)
predict_ranfor_full(modeldata=origmodeldata, dependent=dependent, predictors=unlist(paramsets[5]))
rm(origmodeldata,paramsets,paramsetnames,dependent)
load("../data/modeldata/RForigmodeldatawithgeo_Leben_Tr.RData")
predict_ranfor_full(modeldata=origmodeldata, dependent=dependent, predictors=unlist(paramsets[5]))
View(predict_ranfor_full)
modeldata=origmodeldata
dependent=dependent
predictors=unlist(paramsets[5])
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,paramsets[[pset]])]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dependent, predictors=unlist(paramsets[5]),pset=5)
importance_ranfor_pset(modeldata=origmodeldata, dependent=dependent,pset = 5,altdata=origmodeldata)
importance_ranfor_pset(modeldata=origmodeldata, dependent=dependent,pset = 5,altdata=origmodeldata)
importance_ranfor_pset(modeldata=origmodeldata, dependent=dependent,pset = 5,altdata=origmodeldata)
importance_ranfor_pset(modeldata=origmodeldata, dependent=dependent,pset = 5,altdata=origmodeldata)
importance_ranfor_pset(modeldata=origmodeldata, dependent=dependent,pset = 5,altdata=origmodeldata)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
for (dependent in dependentlist){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- c(allpreds,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31")
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
allpreds <- c(localterrain,regionalterrain,roughness,heights,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31")
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
save(origmodeldata,paramsets,paramsetnames,dependent,file=paste("./data/modeldata/SVMorigmodeldatawithoutgeo_",dependent,".RData",sep="")) }
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
setwd(paste(proj3path,"/data/",sep=""))
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
for (dependent in dependentlist){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
save(origmodeldata,paramsets,paramsetnames,dependent,file=paste("./data/modeldata/RForigmodeldatawithoutgeo_",dependent,".RData",sep="")) }
geomorphons <- read.table("./data/Geominfo_fromP1.txt",sep=",",header=T)
names(geomorphongs)
names(geomorphons)
geomcolx <- names(geomorphons)[90:454]
geomcols <- names(geomorphons)[90:454]
geomcols
for (i in geomcols) {
geomorphons[[i]] <- factor(geomorphons[[i]],levels=1:10)
}
str(geomorphons)
geomdata <- geomorphons[c("ID",geomcols)]
save(geomdata,file="./data/geomorphoninfo.RData")
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
save(geomdata,geomcols,file="./data/geomorphoninfo.RData")
geomorphons <- read.table("./data/Geominfo_fromP1.txt",sep=",",header=T)
geomcols <- names(geomorphons)[90:454]
save(geomdata,geomcols,file="./data/geomorphoninfo.RData")
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
mdata <- merge(mdata,geomdata,by.x="profilnummer",by.y="ID",all.x=T)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
for (dependent in dependentlist){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- c(allpreds,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
paramsets[[6]] <- geomcols
allpreds <- c(localterrain,regionalterrain,roughness,heights,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
q
er
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
str(origmodeldata)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
mdata <- merge(mdata,geomdata,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- c(allpreds,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
paramsets[[6]] <- geomcols
allpreds <- c(localterrain,regionalterrain,roughness,heights,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
str(origmodeldata$geom_dtm_10m_hyd_fl5_L90)
