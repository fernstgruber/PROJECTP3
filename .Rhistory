allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(profiledata)])
nadata <- na.omit(profiledata)
problempunkte <- profiledata[!(profiledata$ID %in% nadata$ID),]
profiledata <- profiledata[profiledata$ID != "12884", ]
profiledata <- profiledata[!(profiledata[[dependent]] %in% c("MrD")),]
names(profiledata)
modelpointIDs <- profiledata$ID
modelpointIDs
bodenSGUIDs <- boden_SGU$ID
bodenSGUIDs
save(bodenSGUIDs,modelpointIDs,file="/home/fabs/PROJECTP2/data2017/pointIDs.RData")
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData"))
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData"))
load(paste(proj2path,"data2017/pointIDs.RData"))
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData",sep=""))
load(paste(proj2path,"data2017/pointIDs.RData",sep=""))
require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
library(knitr)
#proj2path="/home/fabs/PROJECTP2/"
#paper2datapath ="/home/fabs/Data/paper2data/"
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
paper2datapath ="/media/fabs/Volume/01_PAPERZEUG/paper2data/"
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData",sep=""))
load(paste(proj2path,"data2017/pointIDs.RData",sep=""))
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData",sep=""))
load(paste(proj2path,"data2017/pointIDs.RData",sep=""))
View(boden_SGU)
boden_SGU[boden_SGU$ID == "32",]
boden_SGU[boden_SGU$ID == 32,]
boden_SGU[boden_SGU$ID == "32",]
boden_SGU[boden_SGU$ID == "32"]
boden_SGU[boden_SGU$ID == "32",]
str(boden_SGU)
boden_SGU[boden_SGU$ID %in% c("32"),]
boden_SGU[boden_SGU$ID == 33,]
boden_SGU[boden_SGU$ID == 33,]
boden_SGU[boden_SGU$ID == 34,]
boden_SGU[boden_SGU$ID == 35,]
boden_SGU[boden_SGU$ID == 36,]
boden_SGU[boden_SGU$ID == 42,]
boden_SGU[boden_SGU$ID == 48,]
boden_SGU[boden_SGU$ID == 51,]
boden_SGU[boden_SGU$ID == 53,]
boden_SGU[boden_SGU$ID == 54,]
View(evaluateforwardCV)
View(evaluateforwardCV)
View(evaluateforwardCV)
View(evaluateforwardCV_anyerror)
View(evaluateforwardCV_anyerror)
i=1
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
print("######################WITH ALL PREDICTORS###################")
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
i=1
dep=dependentlist[i]
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
load('../data/dependentlists.RData')
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep="")
i=1
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/FSCV/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
print("######################WITH ALL PREDICTORS###################")
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
load(paste("../data/FSCV/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
dep
paste("../data/FSCV/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep="")
i=1
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
print("######################WITH ALL PREDICTORS###################")
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
load('../data/dependentlists.RData')
dep=dependentlist[i]
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
print("######################WITH ALL PREDICTORS###################")
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)h
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
#print("######################WITH ALL PREDICTORS###################")
#predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
mdata <- merge(mdata,geomdata,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
###########################################################################################################
for (dependent in dependentlist){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- c(allpreds,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
paramsets[[6]] <- geomcols
paramsets[[7]] <- c(geomcols,unlist(paramsets[1]))
allpreds <- c(localterrain,regionalterrain,roughness,heights,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
#save(origmodeldata,paramsets,paramsetnames,dependent,file=paste("./data/modeldata/SVMorigmodeldatawithgeoandgeom_",dependent,".RData",sep="")) }
psets <- c(7)
classes <-  levels(origmodeldata[[dependent]])
#save(classes,paramsets,modeldata,paramsetnames,file="classesandparamsets.RData")
#paramsetnames = paramsetnames[psets]
#paramsets = paramsets[psets]
paramsetnames[7] <- 'geomandlocal'
n=7
p=paramsets[psets]
#p=paramsets[1]
#for (p in paramsets){
predset_name <- paramsetnames[n]
preds <- unlist(p)
preds <- preds[preds %in% allpreds]
predset= c(preds)
mymodeldata <- origmodeldata[c(dependent,predset)]
folds = sample(rep(1:5, length = nrow(mymodeldata)))
tt=1:6 #number of best parameters in combination
mydir=paste("./data/LogREGwithgeoandgeom_fw_5fold_6p_",dependent,"_",predset_name,sep="")
dir.create(mydir)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
mdata <- merge(mdata,geomdata,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
###########################################################################################################
#for (dependent in dependentlist){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- c(allpreds,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
paramsets[[6]] <- geomcols
paramsets[[7]] <- c(geomcols,unlist(paramsets[1]))
allpreds <- c(localterrain,regionalterrain,roughness,heights,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
#save(origmodeldata,paramsets,paramsetnames,dependent,file=paste("./data/modeldata/SVMorigmodeldatawithgeoandgeom_",dependent,".RData",sep="")) }
psets <- c(7)
classes <-  levels(origmodeldata[[dependent]])
#save(classes,paramsets,modeldata,paramsetnames,file="classesandparamsets.RData")
#paramsetnames = paramsetnames[psets]
#paramsets = paramsets[psets]
paramsetnames[7] <- 'geomandlocal'
n=7
p=paramsets[psets]
#p=paramsets[1]
#for (p in paramsets){
predset_name <- paramsetnames[n]
preds <- unlist(p)
preds <- preds[preds %in% allpreds]
predset= c(preds)
mymodeldata <- origmodeldata[c(dependent,predset)]
folds = sample(rep(1:5, length = nrow(mymodeldata)))
tt=1:6 #number of best parameters in combination
mydir=paste("./data/LogREGwithgeoandgeom_fw_5fold_6p_",dependent,"_",predset_name,sep="")
dir.create(mydir)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
mdata <- merge(mdata,geomdata,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
###########################################################################################################
#for (dependent in dependentlist){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- c(allpreds,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
paramsets[[6]] <- geomcols
paramsets[[7]] <- c(geomcols,unlist(paramsets[1]))
allpreds <- c(localterrain,regionalterrain,roughness,heights,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
#save(origmodeldata,paramsets,paramsetnames,dependent,file=paste("./data/modeldata/SVMorigmodeldatawithgeoandgeom_",dependent,".RData",sep="")) }
psets <- c(7)
classes <-  levels(origmodeldata[[dependent]])
#save(classes,paramsets,modeldata,paramsetnames,file="classesandparamsets.RData")
#paramsetnames = paramsetnames[psets]
#paramsets = paramsets[psets]
paramsetnames[7] <- 'geomandlocal'
n=7
p=paramsets[psets]
#p=paramsets[1]
#for (p in paramsets){
predset_name <- paramsetnames[n]
preds <- unlist(p)
preds <- preds[preds %in% allpreds]
predset= c(preds)
mymodeldata <- origmodeldata[c(dependent,predset)]
folds = sample(rep(1:5, length = nrow(mymodeldata)))
tt=1:6 #number of best parameters in combination
mydir=paste("./data/LogREGwithgeoandgeom_fw_5fold_6p_",dependent,"_",predset_name,sep="")
dir.create(mydir)
k=5
kmodeldata=mymodeldata[folds != k,]
ktestdata =  mymodeldata[folds == k,]
keepers <- vector()
pred_df_orig <- data.frame(preds = as.character(predset))
pred_df_orig$index <- 1:nrow(pred_df_orig)
pred_df <- pred_df_orig
result_df <- data.frame(tt)
predictions_metrics <- data.frame(index=as.character(unique(pred_df$preds)))
predset_new <- predset
t=1
predictions_metrics <- predictions_metrics
predset_new <-predset_new[!(predset_new %in% keepers)]
seed=sample(1:1000,1)
g=predset_new[1]
f <- paste(dependent,"~.")
names(modeldata)
set.seed(seed)
modelcols <- c(dependent,g,keepers)
modeldata <- kmodeldata[names(kmodeldata) %in% modelcols]
names(kmodeldata)
cvfolds = sample(rep(1:5, length = nrow(kmodeldata)))
cvmodeldata=kmodeldata[folds != i,]
ktestdata =  kmodeldata[folds == i,]
i=1
cvmodeldata=kmodeldata[folds != i,]
ktestdata =  kmodeldata[folds == i,]
fit <- do.call("lm",list(as.formula(f),modeldata))
fit <- do.call("glm",list(as.formula(f),modeldata,family=binomial(link='logit')))
modelcols
modeldata <- kmodeldata[names(kmodeldata) %in% modelcols]
cvfolds = sample(rep(1:5, length = nrow(kmodeldata)))
f <- paste(dependent,"~.")
cvmodeldata=kmodeldata[folds != i,]
cvfolds = sample(rep(1:5, length = nrow(modeldata)))
f <- paste(dependent,"~.")
cvmodeldata=modeldata[folds != i,]
ktestdata =  modeldata[folds == i,]
f <- paste(dependent,"~.")cv
cvmodeldata=modeldata[folds != i,]
cktestdata =  modeldata[folds == i,]
fit <- do.call("glm",list(as.formula(f),cvmodeldata,family=binomial(link='logit')))
fit
summary(fit)
preds = predict(fit,newdata=cktestdata)
cktestdata$preds = predict(fit,newdata=cktestdata)
summary(cktestdata)
?glm
fit.fitted.values
fit$fitted.values
cktestdata$preds = predict(fit,newdata=cktestdata,type = response)
cktestdata$preds = predict(fit,newdata=cktestdata,type = 'response')
cktestdata
?predict.glm
