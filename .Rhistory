require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
print(preds)
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata,withalt=F)
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata)
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
print(preds)
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata,withalt=F)
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata)
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata)
View(predict_ranfor_full)
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
predict_ranfor_full <- function(modeldata,dependent,predictors,doreturn=FALSE, kappasum=FALSE,tausum=FALSE,pset,altdata,withalt=FALSE,withmodelconfusion=FALSE){
require(randomForest)
predictorsall = unlist(paramsets[[pset]])
predictorsall = predictorsall[predictorsall %in% names(modeldata)]
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictorsall)]),importance=T)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
mymodeldata <- modeldata[c(dependent,predictors)]
f <- paste(dependent,"~.")
fit <- do.call("randomForest",list(as.formula(f),mymodeldata))
cverror =  fit$err.rate[nrow(fit$err.rate),1]
print(paste("OOB-error: ",cverror," for predictors",paste(predictors,collapse=" AND ")))
print("confusion OOB")
print(fit$confusion)
if(withmodelconfusion==TRUE){
preddata <- mymodeldata[,!names(mymodeldata)%in% c(dependent)]
preds <- predict(fit,preddata)
CM <- table(preds,mymodeldata[[dependent]])
print(CM)
print(paste("Kappa overall = ",kappa(CM)$sum.kappa))
if(kappasum==T) print(summary.kappa(kappa(CM)))
print(paste("Tau overall = ",tau(CM)$tau))
if(tausum == T) print(summary.tau(tau(CM)))
print(paste("The quality is ",quality(CM)))
print(paste("#########  Cramer's V = ",Cramer(CM)))
}
if(doreturn==TRUE) return(preds)
if(withalt==TRUE){
altmodeldata <- na.omit(altdata[c(dependent,predictors)])
altpreddata<-altmodeldata[predictors]
altpreds <- predict(fit,altpreddata)
ACM <- table(altpreds, altmodeldata[[dependent]])
print(paste("classification error rate with altdata: ",mean(altpreds != altmodeldata[[dependent]])))
}
}
i=1
dep=dependentlist[i]
load('../data/dependentlists.RData')
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
print(preds)
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata,withalt=F)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
print(preds)
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata,withalt=F)
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata,withalt=F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata,withalt=F)
importance_ranfor_pset <- function(modeldata,dependent,pset,altdata,withalt=TRUE){
require(randomForest)
predictors = unlist(paramsets[[pset]])
predictors = predictors[predictors %in% names(modeldata)]
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictors)]),importance=T)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance$parameters <- row.names(importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
print(importance[1:10,c("MeanDecreaseAccuracy")])
if(withalt==TRUE){
altmodeldata <- na.omit(altdata[c(dependent,predictors)])
altpreddata<-altmodeldata[predictors]
altpreds <- predict(fullmodel,altpreddata)
ACM <- table(altpreds, altmodeldata[[dependent]])
print(ACM)
print(paste("classification error rate with altdata: ",mean(altpreds != altmodeldata[[dependent]])))
}
}
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata,withalt=F)
modeldata=origmodeldata
dependent=dep
pset=5
altdata=origmodeldata
withalt=F
predictors = unlist(paramsets[[pset]])
predictors = predictors[predictors %in% names(modeldata)]
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictors)]),importance=T)
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictors)]),importance=T)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance$parameters <- row.names(importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
print(importance[1:10,c("MeanDecreaseAccuracy")])
importance <- as.data.frame(fullmodel$importance)
View(importance)
predictors = unlist(paramsets[[pset]])
predictors = predictors[predictors %in% names(modeldata)]
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,predictors)]),importance=T)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance$parameters <- row.names(importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
importance$MDA <- importance$MeanDecreaseAccuracy
importance$MDG <- importance$MeanDecreaseGini
print(importance[1:10,c("MDA","MDG")])
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
View(importance_ranfor_pset)
View(importance_ranfor_pset)
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
imp <- importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata,withalt=F)
imp <- importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata,withalt=F,returnimportance = TRUE)
imo
imp
predictors <- c(as.character(imp[1,"parameters"]),as.character(preds[2,"parameters"]))
predictors <- c(as.character(imp[1,"parameters"]),as.character(ip[2,"parameters"]))
predictors <- c(as.character(imp[1,"parameters"]),as.character(imp[2,"parameters"]))
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
imp <- importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata,withalt=F,returnimportance = TRUE)
predictors <- c(as.character(imp[1,"parameters"]),as.character(imp[2,"parameters"]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata,withalt=F,withmodelconfusion = FALSE)
i=2
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
imp <- importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata,withalt=F,returnimportance = TRUE)
predictors <- c(as.character(imp[1,"parameters"]),as.character(imp[2,"parameters"]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata,withalt=F,withmodelconfusion = FALSE)
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
imp <- importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=5,altdata=origmodeldata,withalt=F,returnimportance = TRUE)
predictors <- c(as.character(imp[1,"parameters"]),as.character(imp[2,"parameters"]))
predict_ranfor_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,pset=5,kappasum = F,tausum = F,altdata=origmodeldata,withalt=F,withmodelconfusion = FALSE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load('./data/dependentlists.RData')
i=1
fullpredlist <- vector()
predictorlist <- list()
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
uniquepredictors <- unique(predictors)
predictorlist[[1]] <- uniquepredictors
fullpredlist <- c(fullpredlist,uniquepredictors)
}
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
preds <- evaluateforwardCV_anyerror(mypath=paste("./data/FSCV/SVM_geoandgeom/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
uniquepredictors <- unique(predictors)
predictorlist[[1]] <- uniquepredictors
fullpredlist <- c(fullpredlist,uniquepredictors)
}
save(fullpredlist,predictorlist,file=("./data/modeldata/predictorlists_SVM.RData"))
fullpredlist <- uniqute(fullpredlist)
fullpredlist <- unique(fullpredlist)
full predictorlist
fullpredlist
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=6,altdata=origmodeldata,withalt=F,returnimportance = F)
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
importance_ranfor_pset(modeldata=origmodeldata,dependent=dep,pset=6,altdata=origmodeldata,withalt=F,returnimportance = F)
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoms/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoms/RFwithgeoandgeom_fw_5fold_6p_",dep,"_geoms",sep=""),kk=1:5,endround = 6,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
paramsets[[7]] <- c(geomcols,unlist(paramsets[1]))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
mdata <- merge(mdata,geomdata,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
for (dependent in dependentlist){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- c(allpreds,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
paramsets[[6]] <- geomcols
q
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
mdata <- merge(mdata,geomdata,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
###########################################################################################################
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- c(allpreds,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
paramsets[[6]] <- geomcols
c(geomcols,unlist(paramsets[1]))
a
c(geomcols,unlist(paramsets[1]))
paramsets[[7]] <- c(geomcols,unlist(paramsets[1]))
allpreds <- c(localterrain,regionalterrain,roughness,heights,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
psets <- c(7)
classes <-  levels(origmodeldata[[dependent]])
paramsetnames[7] <- 'geomandlocal'
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_geoms/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_NA",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
print(preds)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[6]),printpreds = FALSE)
