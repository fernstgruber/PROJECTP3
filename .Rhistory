eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file=paste(paper2datapath,"/sampledata_100mgrid.RData",sep=""))
cl1= "SB"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
cl1="SB"
cl2="TG"
dependent="SGU_kartiert"
relevantmodeldata <- modeldataoktober[modeldataoktober$SGU_kartiert %in% c(cl1,cl2),]
relevantmodeldata$SGU_kartiert <- droplevels(relevantmodeldata$SGU_kartiert)
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesroughnessp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesiteslocalterrainp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
boxplot(data=relevantmodeldata[c("TRI_hr_ws43",dependent)],as.formula(paste("TRI_hr_ws43","~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
cl1="SB"
cl2="TG"
dependent="geolegen_1"
relevantmodeldata <- sampledata[sampledata$geolegen_1 %in% c(cl1,cl2),]
relevantmodeldata$geolegen_1<- as.factor(relevantmodeldata$geolegen_1)
#evaluateforwardCV_anyerror(mypath = paste("/home/fabs/PROJECTP2/data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesroughnessp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),"SGU_kartiert")],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),"SGU_kartiert")],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
paper2datapath ="/media/fabs/Volume/01_PAPERZEUG/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernsSDruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernsSDruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
myfunctions <- getURL("https://raw.githubusercontent.com/fernsSDruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
#proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
#paper2datapath ="/media/fabs/Volume/01_PAPERZEUG/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
?barplot
load("/home/fabs/PROJECTP2/data2017/boden_SGU_Oct5.RData")
barplot(boden_SGU$TYP)
barplot(table(boden_SGU$TYP))
barplot(table(boden_SGU$TYP),las=2)
barplot(table(boden_SGU$TYP),las=2,cex.names=0.5)
barplot(table(boden_SGU$TYP),las=2,cex.names=0.5,ylim=c(0,200))
svg("/home/fabs/PROJECTP2/figure/studyarea_statistics/barplot_bodentypen.svg")
barplot(table(boden_SGU$TYP),las=2,cex.names=0.5,ylim=c(0,200))
dev.off()
load(paste(proj2path,"data2017/modeldata_SGUkartier.RData"))
load(paste(proj2path,"data2017/modeldata_SGUkartier.RData",sep=""))
paste(proj2path,"data2017/modeldata_SGUkartier.RData",sep="")
load(paste(proj2path,"data2017/modeldata_SGUkartiert.RData",sep=""))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
View(modeldataoktober)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
View(boden_SGU)
View(boden_SGU)
load("/home/fabs/Data/paper2data/profiledata.RData")
names(profiledata)
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependent="SGU_kartiert"
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(profiledata)])
nadata <- na.omit(profiledata)
problempunkte <- profiledata[!(profiledata$ID %in% nadata$ID),]
profiledata <- profiledata[profiledata$ID != "12884", ]
profiledata <- profiledata[!(profiledata[[dependent]] %in% c("MrD")),]
names(profiledata)
modelpointIDs <- profiledata$ID
modelpointIDs
bodenSGUIDs <- boden_SGU$ID
bodenSGUIDs
save(bodenSGUIDs,modelpointIDs,file="/home/fabs/PROJECTP2/data2017/pointIDs.RData")
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData"))
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData"))
load(paste(proj2path,"data2017/pointIDs.RData"))
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData",sep=""))
load(paste(proj2path,"data2017/pointIDs.RData",sep=""))
require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
library(knitr)
#proj2path="/home/fabs/PROJECTP2/"
#paper2datapath ="/home/fabs/Data/paper2data/"
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
paper2datapath ="/media/fabs/Volume/01_PAPERZEUG/paper2data/"
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData",sep=""))
load(paste(proj2path,"data2017/pointIDs.RData",sep=""))
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
load(paste(proj2path,"data2017/boden_SGU_Oct5.RData",sep=""))
load(paste(proj2path,"data2017/pointIDs.RData",sep=""))
View(boden_SGU)
boden_SGU[boden_SGU$ID == "32",]
boden_SGU[boden_SGU$ID == 32,]
boden_SGU[boden_SGU$ID == "32",]
boden_SGU[boden_SGU$ID == "32"]
boden_SGU[boden_SGU$ID == "32",]
str(boden_SGU)
boden_SGU[boden_SGU$ID %in% c("32"),]
boden_SGU[boden_SGU$ID == 33,]
boden_SGU[boden_SGU$ID == 33,]
boden_SGU[boden_SGU$ID == 34,]
boden_SGU[boden_SGU$ID == 35,]
boden_SGU[boden_SGU$ID == 36,]
boden_SGU[boden_SGU$ID == 42,]
boden_SGU[boden_SGU$ID == 48,]
boden_SGU[boden_SGU$ID == 51,]
boden_SGU[boden_SGU$ID == 53,]
boden_SGU[boden_SGU$ID == 54,]
View(evaluateforwardCV)
View(evaluateforwardCV)
View(evaluateforwardCV)
View(evaluateforwardCV_anyerror)
View(evaluateforwardCV_anyerror)
i=1
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
print("######################WITH ALL PREDICTORS###################")
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
i=1
dep=dependentlist[i]
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
load('../data/dependentlists.RData')
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep="")
i=1
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/FSCV/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
print("######################WITH ALL PREDICTORS###################")
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
load(paste("../data/FSCV/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
dep
paste("../data/FSCV/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep="")
i=1
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
print("######################WITH ALL PREDICTORS###################")
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
load('../data/dependentlists.RData')
dep=dependentlist[i]
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
print("######################WITH ALL PREDICTORS###################")
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)h
for(i in 1:length(dependentlist)){
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/SVM_localterrain/SVMwithgeoandgeom_fw_5fold_10p_",dep,"_localterrain",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
predictors <- c(as.character(preds[1,1]),as.character(preds[2,1]))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=predictors,kappasum = F,tausum = F)
predictors = vector()
for (n in 1:ncol(preds)){
for (n2 in 1:nrow(preds)){
predictors <- c(predictors,as.character(preds[n2,n]))
}
}
print("###################### WITH  PREDICTORS from the FW SELECTION ###################")
uniquepredictors <- unique(predictors)
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=uniquepredictors)
#print("######################WITH ALL PREDICTORS###################")
#predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
rm(origmodeldata,paramsets,paramsetnames,dependent)
}
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
load(paste("../data/modeldata/SVMorigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
predict_radial_full(modeldata=origmodeldata, dependent=dep, predictors=unlist(paramsets[1]),printpreds = FALSE)
unlink(paste(gisDbase,"/",mapsetnew), recursive = FALSE)
mapsetnew=paste("predict_",dependent,sep="")
gisDbase =  "/home/fabs/Data/GRASSDATA/"                                                     #
##TO TO: die region passt nicht!, schreib funktion um mapset zu entfernen!
require(e1071)
require(rgdal)
require(rgrass7)
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load('./data/dependentlists.RData')
load(file="./data/modeldata/predictorlists_SVM_localandgeomtop2.RData")
res10m_dtm <- c( "minic_ws3","slope_ws11","profc_ws15",  "maxic_ws15", "GeneralCurvature","minic_ws11", "crosc_ws11", "longc_ws15",
"MinimalCurvature",  "profc_ws11", "profc_ws5",  "minic_ws15", "crosc_ws5", "profc_ws3","LongitudinalCurvature",
"maxic_ws3", "maxic_ws7","MaximalCurvature","PlanCurvature", "slope_ws5" , "planc_ws11")
res50m_mitsaga <- c("slope_DTM_50m_avg_ws3","Slope","longc_DTM_50m_avg_ws11","slope_DTM_50m_avg_ws7","crosc_DTM_50m_avg_ws11",
"slope_DTM_50m_avg_ws5", "profc_DTM_50m_avg_ws7", "minic_DTM_50m_avg_ws3", "Flow_Line_Curvature",  "minic_DTM_50m_avg_ws5",
"minic_DTM_50m_avg_ws11", "planc_DTM_50m_avg_ws3", "Profile_Curvature", "Tangential_Curvature", "longc_DTM_50m_avg_ws3",
"longc_DTM_50m_avg_ws7",  "planc_DTM_50m_avg_ws11", "Convexity", "General_Curvature")
predsgeom <- c("geom_dtm_10m_hyd_fl5_L10","geom_10m_fl3_L3" ,"geom_10m_fl4_L10","geom_10m_fl4_L9","geom_10m_fl8_L16","geom_10m_fl10_L70",
"geom_10m_fl10_L17","geom_10m_fl10_L6","geom_10m_fl8_L7", "geom_10m_fl10_L10" , "geom_10m_fl10_L27" ,"geom_10m_fl8_L11",
"geom_10m_fl10_L5","geom_dtm_10m_hyd_fl5_L5","geom_10m_fl10_L7","geom_10m_fl8_L50" ,"geom_10m_fl8_L9","geom_10m_fl1_L100",
"geom_10m_fl1_L10" ,"geom_10m_fl8_L28","geom_10m_fl10_L3" )
dtm_hr <- c("minic_ws9_hr","Total_Curvature_hr","Longitudinal_Curvature_hr" ,"crosc_ws11_hr", "crosc_ws3_hr","minic_ws7_hr","CrossSectionalCurvature_hr",
"Slope_hr","slope_ws15_hr","dtm_hr_CONVEX_r30","slope_ws3_hr", "slope_ws13_hr","slope_ws19_hr","crosc_ws19_hr",
"Flow_Line_Curvature","maxic_ws3_hr","crosc_ws23_hr","planc_ws29_hr", "minic_ws3_hr",  "maxic_ws5_hr",  "minic_ws23_hr",
"profc_ws3_hr","maxic_ws19_hr", "longc_ws23_hr","minic_ws15_hr", "minic_ws19_hr","minic_ws5_hr","slope_ws5_hr",
"crosc_ws5_hr","profc_ws29_hr", "minic_ws11_hr", "slope_ws11_hr", "Plan_Curvature_hr", "maxic_ws11_hr",
"planc_ws11_hr","crosc_ws29_hr","planc_ws5_hr","planc_ws23_hr")
allpredictors <- c(res10m_dtm,res50m_mitsaga,predsgeom,dtm_hr)
unlink(paste(gisDbase,"/",mapsetnew), recursive = T)
?unlink
(paste(gisDbase,"/",mapsetnew), recursive = T)
unlink(paste(gisDbase,"/",mapsetnew), recursive = T)
res10m_dtm <- c( "minic_ws3","slope_ws11","profc_ws15",  "maxic_ws15", "GeneralCurvature","minic_ws11", "crosc_ws11", "longc_ws15",
"MinimalCurvature",  "profc_ws11", "profc_ws5",  "minic_ws15", "crosc_ws5", "profc_ws3","LongitudinalCurvature",
"maxic_ws3", "maxic_ws7","MaximalCurvature","PlanCurvature", "slope_ws5" , "planc_ws11")
paste(gisDbase,"/",mapsetnew)
unlink(paste(gisDbase,"/",mapsetnew,sep=""), recursive = T)
dir.mapsetnew
mapsetnew
dependent=dependentlist[1]
unlink(paste(gisDbase,"/",mapsetnew,sep=""), recursive = T)
paste(gisDbase,"/",mapsetnew,sep="")
mapsetnew=paste("predict_",dependent,sep="")
unlink(paste(gisDbase,"/",mapsetnew,sep=""), recursive = T)
paste(gisDbase,"/",mapsetnew,sep="")
unlink(paste(gisDbase,mapsetnew,sep=""), recursive = T)
paste(gisDbase,mapsetnew,sep="")
paste(gisDbase,location,mapsetnew,sep="")
location="EPPAN_vhr"                                                                         #
unlink(paste(gisDbase,location,mapsetnew,sep=""), recursive = T)
paste(gisDbase,location,mapsetnew,sep="")
unlink(paste(gisDbase,location,"/",mapsetnew,sep=""), recursive = T)
##TO TO: die region passt nicht!, schreib funktion um mapset zu entfernen!
require(e1071)
require(rgdal)
require(rgrass7)
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load('./data/dependentlists.RData')
load(file="./data/modeldata/predictorlists_SVM_localandgeomtop2.RData")
res10m_dtm <- c( "minic_ws3","slope_ws11","profc_ws15",  "maxic_ws15", "GeneralCurvature","minic_ws11", "crosc_ws11", "longc_ws15",
"MinimalCurvature",  "profc_ws11", "profc_ws5",  "minic_ws15", "crosc_ws5", "profc_ws3","LongitudinalCurvature",
"maxic_ws3", "maxic_ws7","MaximalCurvature","PlanCurvature", "slope_ws5" , "planc_ws11")
res50m_mitsaga <- c("slope_DTM_50m_avg_ws3","Slope","longc_DTM_50m_avg_ws11","slope_DTM_50m_avg_ws7","crosc_DTM_50m_avg_ws11",
"slope_DTM_50m_avg_ws5", "profc_DTM_50m_avg_ws7", "minic_DTM_50m_avg_ws3", "Flow_Line_Curvature",  "minic_DTM_50m_avg_ws5",
"minic_DTM_50m_avg_ws11", "planc_DTM_50m_avg_ws3", "Profile_Curvature", "Tangential_Curvature", "longc_DTM_50m_avg_ws3",
"longc_DTM_50m_avg_ws7",  "planc_DTM_50m_avg_ws11", "Convexity", "General_Curvature")
predsgeom <- c("geom_dtm_10m_hyd_fl5_L10","geom_10m_fl3_L3" ,"geom_10m_fl4_L10","geom_10m_fl4_L9","geom_10m_fl8_L16","geom_10m_fl10_L70",
"geom_10m_fl10_L17","geom_10m_fl10_L6","geom_10m_fl8_L7", "geom_10m_fl10_L10" , "geom_10m_fl10_L27" ,"geom_10m_fl8_L11",
"geom_10m_fl10_L5","geom_dtm_10m_hyd_fl5_L5","geom_10m_fl10_L7","geom_10m_fl8_L50" ,"geom_10m_fl8_L9","geom_10m_fl1_L100",
"geom_10m_fl1_L10" ,"geom_10m_fl8_L28","geom_10m_fl10_L3" )
dtm_hr <- c("minic_ws9_hr","Total_Curvature_hr","Longitudinal_Curvature_hr" ,"crosc_ws11_hr", "crosc_ws3_hr","minic_ws7_hr","CrossSectionalCurvature_hr",
"Slope_hr","slope_ws15_hr","dtm_hr_CONVEX_r30","slope_ws3_hr", "slope_ws13_hr","slope_ws19_hr","crosc_ws19_hr",
"Flow_Line_Curvature","maxic_ws3_hr","crosc_ws23_hr","planc_ws29_hr", "minic_ws3_hr",  "maxic_ws5_hr",  "minic_ws23_hr",
"profc_ws3_hr","maxic_ws19_hr", "longc_ws23_hr","minic_ws15_hr", "minic_ws19_hr","minic_ws5_hr","slope_ws5_hr",
"crosc_ws5_hr","profc_ws29_hr", "minic_ws11_hr", "slope_ws11_hr", "Plan_Curvature_hr", "maxic_ws11_hr",
"planc_ws11_hr","crosc_ws29_hr","planc_ws5_hr","planc_ws23_hr")
allpredictors <- c(res10m_dtm,res50m_mitsaga,predsgeom,dtm_hr)
####SET PREDICTORS AND DEPENDENT#############################################################
predictors <- c("geom_10m_fl4_L10","slope_DTM_50m_avg_ws7")
oldprednames<- c("geom_10m_fl4_L10","slope_DTM_50m_avg_ws7_50m")
dependent=dependentlist[1]
###setup GRASS################################################################################
gisBase="/usr/local/src/grass70_release/dist.x86_64-unknown-linux-gnu"                       #
#gisDbase =  "/media/fabs/Volume/Data/GRASSDATA/"                                             #
gisDbase =  "/home/fabs/Data/GRASSDATA/"                                                     #
location="EPPAN_vhr"                                                                         #
mapset="PERMANENT"                                                                           #
### get raster names##########################################################################
ST = "SUEDTIROL_DTM_NEU"                                                                     #
ST_mapsets= list.dirs(paste(gisDbase,"/",ST,sep=""),recursive = F,full.names = F)            #
EPPAN_mapsets= list.dirs(paste(gisDbase,"/",location,sep=""),recursive = F,full.names = F)   #
allrast_ST =vector()                                                                         #
for(ms in ST_mapsets){                                                                       #
vects <- list.files(paste(gisDbase,"/",ST,"/",ms,"/",'cats',sep=""))                       #
allrast_ST <- c(allrast_ST,vects)                                                          #
}                                                                                          #
allrast_EPPAN = vector()                                                                     #
for(ms in EPPAN_mapsets){                                                                    #
vects <- list.files(paste(gisDbase,"/",location,"/",ms,"/",'cats',sep=""))                 #
allrast_EPPAN <- c(allrast_EPPAN,vects)                                                    #
}                                                                                            #
##############################################################################################
pot_ST <- ST_mapsets[c(10:19)]
#pot_EPPAN <- EPPAN_mapsets[c(4:10)]
pot_EPPAN <- EPPAN_mapsets
##############################################################################################
initGRASS(gisBase = gisBase,gisDbase = gisDbase,location=location,mapset=mapset,override = TRUE)
mapsetnew=paste("predict_",dependent,sep="")
try(execGRASS("g.mapset",flags=c("c"), mapset=mapsetnew))
region <- execGRASS("g.region" ,flags=c("p"),rast="dtm_hr_eppan@dtm_hr") #hier fehlt noch der raster!
p=predictors[2]
for (p in predictors){
if (p %in% c(res10m_dtm,predsgeom,res50m_mitsaga)){
for (ms in pot_ST){
rasts <-  list.files(paste(gisDbase,"/",ST,"/",ms,"/",'cats',sep=""))
if (p %in% rasts) {
execGRASS("r.proj",location=ST,mapset=ms,input=p)
execGRASS("r.mapcalc", expression= paste(p," = ",p),flags=c("overwrite"))        }}
}else {
for (ms in ST_mapsets){
rasts <-  list.files(paste(gisDbase,"/",location,"/",ms,"/",'cats',sep=""))
if(p %in% rasts){
execGRASS("g.copy",raster=paste(p,"@",ms,",",p,sep=""))}}
}
}
execGRASS("g.list",type="rast",mapset=mapsetnew)
######LOAD THE MODELDATA
load(paste("./data/modeldata/SVMorigmodeldatawithgeoandgeom_",dependent,".RData",sep=""))
modelcols <- c(dependent,oldprednames)
pred1 <-readRAST(predictors[1])
data <- pred1@data
for (i in predictors[2:length(predictors)]){
temp <- readRAST(i)@data
data[[i]] <- temp[[i]]
}
names(data) <- oldprednames
data$UID <- 1:nrow(data)
modeldata <- origmodeldata[c(modelcols)]
for (p in predictors){
if (p %in% predsgeom){
id <- which(predictors==p)
str(modeldata[oldprednames[id]])
str(data[oldprednames[id]])
data[oldprednames[id]] <-factor(data[oldprednames[id]],levels=levels(modeldata[[oldprednames[id]]]))
}
}
summary(modeldata)##geom geht
