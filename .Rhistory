setwd(proj3path)
spatialdata <- readOGR("./data/shapesSEPP/Profilpunktemitboden_UTM.shp",layer="Profilpunktemitboden_UTM")
pointdata <- spatialdata@data
thalheimer <- read.table("./data/results_NOV2017/Thalheimer_AND__ReBO_profileruns/Thalheimer_all_dez162017.csv",sep="\t",header=T)
resultcolnumbers <- c(1,10:12,26,28,34,36,38,40,49,51,52,57:58,91,94,97:129)
resultcols <- names(thalheimer)[resultcolnumbers]
#WIE SCHAUTS AUS MIT GEOMORPHONS
rebo <- read.table("./data/results_NOV2017/Thalheimer_AND__ReBO_profileruns/ReBo_all_dez182017.csv",sep="\t",header=T)
resultcols %in% names(rebo)
resultcolnumbers %in% names(thalheimer)
Sepp_UE <- rbind(thalheimer[resultcols],rebo[resultcols])
summary(Sepp_UE)
factorcols <- resultcols[c(1,5,7,11,12,14,15,16,17,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)]
for (i in factorcols){
Sepp_UE[[i]] <- as.factor(Sepp_UE[[i]])
}
names(pointdata)
names(pointdata)names(Sepp_UE)
names(Sepp_UE)
Sepp_UE$profilnummer %in% pointdata$ID
summary(Sepp_UE$profilnummer %in% pointdata$ID)
Sepp_UE[Sepp_UE$profilnummer %in% pointdata$ID]
Sepp_UE[Sepp_UE$profilnummer %in% pointdata$ID,]
Sepp_UE[!(Sepp_UE$profilnummer %in% pointdata$ID,)]
Sepp_UE[!(Sepp_UE$profilnummer %in% pointdata$ID),]
View(pointdata)
preppeddata = merge(Sepp_UE, pointdata,by.x="profilnummer",by.y="ID",all.x=T)
summary(preppeddata[1:100])
summary(preppeddata)
summary(preppeddata)
View(preppeddata)
save(preppeddata, paste(proj3path, "/preppeddata.RData"))
save(preppeddata, paste(proj3path, "/preppeddata.RData",sep=""))
paste(proj3path, "/preppeddata.RData",sep="")
save(preppeddata, paste(proj3path, "data/preppeddata.RData",sep=""))
?save
save(preppeddata, file=paste(proj3path, "data/preppeddata.RData",sep=""))
save(preppeddata, file=paste(proj3path, "/data/preppeddata.RData",sep=""))
spatialdata <- readOGR("./data/shapesSEPP/Profilpunktemitboden_UTM.shp",layer="Profilpunktemitboden_UTM")
load("/media/fabs/Volume/01_PAPERZEUG/paper2data/profiledata.RData")
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load("/media/fabs/Volume/01_PAPERZEUG/paper2data/profiledata.RData")
load("/media/fabs/Volume/01_PAPERZEUG/paper2data/profiledata.RData")
load(paste(paperzeugpfad,"paper2data/profiledata.RData",sep=""))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
library(knitr)
require(rgdal)
paperzeugpfad <- "//home/fabs/Data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load(paste(paperzeugpfad,"paper2data/profiledata.RData",sep=""))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
library(knitr)
require(rgdal)
paperzeugpfad <- "//home/fabs/Data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load(paste(paperzeugpfad,"paper2data/profiledata.RData",sep=""))
proj3path="/home/fabs/PROJECTP3"
setwd(proj3path)
thalheimer <- read.table("./data/results_NOV2017/Thalheimer_AND__ReBO_profileruns/Thalheimer_all_dez162017.csv",sep="\t",header=T)
resultcolnumbers <- c(1,10:12,26,28,34,36,38,40,49,51,52,57:58,91,94,97:129)
resultcols <- names(thalheimer)[resultcolnumbers]
rebo <- read.table("./data/results_NOV2017/Thalheimer_AND__ReBO_profileruns/ReBo_all_dez182017.csv",sep="\t",header=T)
resultcols %in% names(rebo)
resultcolnumbers %in% names(thalheimer)
Sepp_UE <- rbind(thalheimer[resultcols],rebo[resultcols])
summary(Sepp_UE)
factorcols <- resultcols[c(1,5,7,11,12,14,15,16,17,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)]
for (i in factorcols){
Sepp_UE[[i]] <- as.factor(Sepp_UE[[i]])
}
names(profiledata$ID)
names(profiledata)
names(profiledata)[1:50]
summary(Sepp_UE$profilnummer %in% profiledata$ID)
Sepp_UE[!(Sepp_UE$profilnummer %in% pointdata$ID),]
Sepp_UE[!(Sepp_UE$profilnummer %in% profiledata$ID),]
preppeddata = merge(Sepp_UE, profiledata,by.x="profilnummer",by.y="ID",all.x=T)
summary(preppeddata)
summary(preppeddata)
View(preppeddata)
summary(preppeddata$Sx14_KAKWe)
summary(preppeddata$crosc_ws11_10m)
naoimit <- na.omit(preppeddata)
summary(profiledata)
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
library(knitr)
require(rgdal)
#paperzeugpfad <- "/media/fabs/Volume/01_PAPERZEUG/"
paperzeugpfad <- "//home/fabs/Data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load(paste(paperzeugpfad,"paper2data/profiledata.RData",sep=""))
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3"
proj3path="/home/fabs/PROJECTP3"
setwd(proj3path)
#spatialdata <- readOGR("./data/shapesSEPP/Profilpunktemitboden_UTM.shp",layer="Profilpunktemitboden_UTM")
#pointdata <- spatialdata@data
thalheimer <- read.table("./data/results_NOV2017/Thalheimer_AND__ReBO_profileruns/Thalheimer_all_dez162017.csv",sep="\t",header=T)
resultcolnumbers <- c(1,10:12,26,28,34,36,38,40,49,51,52,57:58,91,94,97:129)
resultcols <- names(thalheimer)[resultcolnumbers]
#WIE SCHAUTS AUS MIT GEOMORPHONS
rebo <- read.table("./data/results_NOV2017/Thalheimer_AND__ReBO_profileruns/ReBo_all_dez182017.csv",sep="\t",header=T)
resultcols %in% names(rebo)
resultcolnumbers %in% names(thalheimer)
Sepp_UE <- rbind(thalheimer[resultcols],rebo[resultcols])
summary(Sepp_UE)
factorcols <- resultcols[c(1,5,7,11,12,14,15,16,17,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)]
for (i in factorcols){
Sepp_UE[[i]] <- as.factor(Sepp_UE[[i]])
}
#identifier for pointdata: ID
#identifier for Sepp_Ue:profilnummer
#identifier for profiledata: ID
summary(Sepp_UE$profilnummer %in% profiledata$ID)
Sepp_UE[!(Sepp_UE$profilnummer %in% profiledata$ID),]
preppeddata = merge(Sepp_UE, profiledata,by.x="profilnummer",by.y="ID",all.x=T)
summary(preppeddata)
save(preppeddata,heights,localterrain, regionalterrain,roughness, file=paste(proj3path, "/data/preppeddata.RData",sep=""))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=allpreds <- c(localterrain,regionalterrain,roughness,heights)
names(preppeddata)[1:100]
dependentlist=names(preppeddata)[36:50]
dpendentli
dependentlist
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
nadata <- na.omit(preppeddata)
names(preppeddata)[1:100]
modeldata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
modeldata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
modeldata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(preppeddata)
summary(modeldata$profilnummer)
badones <-vector()
for(pp in allpreds){
if(nrow(preppeddata[is.na(preppeddata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for(pp in allpreds){
if(nrow(preppeddata[is.na(preppeddata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
badones <-vector()
for(pp in allpreds){
if(nrow(preppeddata[is.na(preppeddata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
View(preppeddata)
View(modeldata)
nadata <- na.omit(modeldata)
problempunkte <- profiledata[!(profiledata$ID %in% nadata$ID),]
problempunkte <- modeldata[!(modeldata$ID %in% nadata$ID),]
problempunkte <- modeldata[!(modeldata$ID %in% nadata$ID),]
nadata <- na.omit(modeldata)
nadata$ID
nadata$profilnummer
problempunkte <- modeldata[!(modeldata$profilnummer %in% nadata$profilnummer),]
dependent = dependentlist[1]
summary(modeldata[[dependent]])
modeldata[[dependent]] <- droplevels(profiledata[[dependent]])
modeldata <- na.omit(modeldata)
modeldata[[dependent]] <- droplevels(profiledata[[dependent]])
modeldata[[dependent]] <- droplevels(modeldata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(preppeddata[is.na(preppeddata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(profiledata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
for (p in allpreds){
if (summary(modeldatadata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
for (p in allpreds){
if (summary(modeldata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
badones <-vector()
for(pp in allpreds){
if(nrow(preppeddata[is.na(preppeddata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
pp=allpreds[1]
summary(modeldata[[pp]])
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
modeldata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(modeldata)
problempunkte <- modeldata[!(modeldata$profilnummer %in% nadata$profilnummer),]
modeldata <- na.omit(modeldata)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
#for (dependent in dependentlist){
modeldata[[dependent]] <- droplevels(modeldata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(modeldata[is.na(modeldata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(modeldata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(modeldata)]
paramsets[[3]] <- roughness
allpreds <- c(localterrain,regionalterrain,roughness,heights)
origmodeldata <- profiledata[names(profiledata) %in% c(dependent,"SGU_gk",allpreds)]
origmodeldata <- modeldata[names(modeldata) %in% c(dependent,allpreds)]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
#for (dependent in dependentlist){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(m[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
#for (dependent in dependentlist){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
psets <- c(1)
classes <-  levels(origmodeldata[[dependent]])
classes
paramsetnames = paramsetnames[psets]
paramsets = paramsets[psets]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
load(file=paste(proj3path, "/data/preppeddata.RData",sep=""))
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[1]
#for (dependent in dependentlist){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- allpreds
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
psets <- c(5)
classes <-  levels(origmodeldata[[dependent]])
#save(classes,paramsets,modeldata,paramsetnames,file="classesandparamsets.RData")
paramsetnames = paramsetnames[psets]
paramsets = paramsets[psets]
dependent
p=paramsets[1]
predset_name <- paramsetnames[n]
preds <- unlist(p)
preds <- preds[preds %in% allpreds]
predset= c(preds)
mymodeldata <- origmodeldata[c(dependent,predset)]
folds = sample(rep(1:5, length = nrow(mymodeldata)))
tt=1:10 #number of best parameters in combination
mydir=paste("ranfor_fw_5fold_20p_",dependent,"_",predset_name,"",sep="")
dir.create(mydir)
n=1
p=paramsets[1]
predset_name <- paramsetnames[n]
preds <- unlist(p)
preds <- preds[preds %in% allpreds]
predset= c(preds)
mymodeldata <- origmodeldata[c(dependent,predset)]
folds = sample(rep(1:5, length = nrow(mymodeldata)))
tt=1:10 #number of best parameters in combination
mydir=paste("ranfor_fw_5fold_20p_",dependent,"_",predset_name,"",sep="")
mydir=paste("ranfor_fw_5fold_10p_",dependent,"_",predset_name,"",sep="")
setwd(paste(proj3path,"/data/",sep=""))
dir.create(mydir)
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
source('~/PROJECTP3/scripts/RF_FWCV_basis.R', echo=TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
library(knitr)
require(rgdal)
#paperzeugpfad <- "/media/fabs/Volume/01_PAPERZEUG/"
paperzeugpfad <- "//home/fabs/Data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
load(paste(paperzeugpfad,"paper2data/profiledata.RData",sep=""))
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3"
proj3path="/home/fabs/PROJECTP3"
setwd(proj3path)
#spatialdata <- readOGR("./data/shapesSEPP/Profilpunktemitboden_UTM.shp",layer="Profilpunktemitboden_UTM")
#pointdata <- spatialdata@data
thalheimer <- read.table("./data/results_NOV2017/Thalheimer_AND__ReBO_profileruns/Thalheimer_all_dez162017.csv",sep="\t",header=T)
resultcolnumbers <- c(1,10:12,26,28,34,36,38,40,49,51,52,57:58,91,94,97:129)
resultcols <- names(thalheimer)[resultcolnumbers]
#WIE SCHAUTS AUS MIT GEOMORPHONS
rebo <- read.table("./data/results_NOV2017/Thalheimer_AND__ReBO_profileruns/ReBo_all_dez182017.csv",sep="\t",header=T)
resultcols %in% names(rebo)
resultcolnumbers %in% names(thalheimer)
Sepp_UE <- rbind(thalheimer[resultcols],rebo[resultcols])
summary(Sepp_UE)
factorcols <- resultcols[c(1,5,7,11,12,14,15,16,17,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)]
for (i in factorcols){
Sepp_UE[[i]] <- as.factor(Sepp_UE[[i]])
}
#identifier for pointdata: ID
#identifier for Sepp_Ue:profilnummer
#identifier for profiledata: ID
summary(Sepp_UE$profilnummer %in% profiledata$ID)
Sepp_UE[!(Sepp_UE$profilnummer %in% profiledata$ID),]
write.table(Sepp_UE,"./data/SEPP_results.txt",sep="\t",header=T )
write.table(Sepp_UE,"./data/SEPP_results.txt",sep="\t")
View(Sepp_UE)
write.table(Sepp_UE,"./data/SEPP_results.txt",sep="\t",row.names = F)
names(origmodeldata)
dependents
dependent
mydir
load("/home/fabs/PROJECTP3/data/ranfor_fw_5fold_10p_Leben_Tr_allpreds/k5_round_10.RData")
result_df
load("/home/fabs/PROJECTP3/data/ranfor_fw_5fold_10p_Leben_Org_NA/k5_round_10.RData")
result_df
