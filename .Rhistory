sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file="/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
names(modeldataoktober)[1:50]
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
cl1= "AD"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,as.factor(1),as.factor(0))
summary(relevantmodeldata$correct)
View(relevantmodeldata)
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
summary(relevantmodeldata$correct)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
dependent="correct"
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
paramsets[5]
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
unlist(paramsets[5]) %in% relevantmodeldata
unlist(paramsets[5]) %in% names(relevantmodeldata)
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file="/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
names(modeldataoktober)[1:50]
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 2,dependent = dependent)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
predict_ranfor_full(modeldata = relevantmodeldata,pset = 5,dependent = dependent,predictors = )
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
View(increaseacc)
modeldata = relevantmodeldata
pset = 5
dependent = dependent
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,paramsets[[pset]])]),importance=TRUE)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
View(importance)
View(increaseacc)
require(knitr)
kable(importance)
kable(importance)
View(importance_ranfor_pset_newlegend)
View(increaseacc)
View(increaseacc)
View(increaseacc)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file="/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
View(increaseacc)
View(increaseacc)
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,paramsets[[pset]])]),importance=TRUE)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
kable(importance[1:10,])
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
View(increaseacc)
View(increaseacc)
modeldata = relevantmodeldata
pset = 5
dependent = dependent
View(increaseacc)
View(increaseacc)
fullmodel <- randomForest(as.formula(paste(dependent,"~.")),na.omit(modeldata[c(dependent,paramsets[[pset]])]),importance=TRUE)
print(paste("OBB error with all predictors of ",paramsetnames[pset], "is ",fullmodel$err.rate[nrow(fullmodel$err.rate),1]))
importance <- as.data.frame(fullmodel$importance)
importance <- importance[order(importance$MeanDecreaseAccuracy,decreasing = T),]
kable(importance[1:10,])
kable(as.data.frame(importance[1:10,]))
kable(as.data.frame(importance[1:10,]))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file="/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/home/fabs/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file="/home/fabs/Data/paper2data/sampledata_100mgrid.RData")
cl1= "AD"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
kable(as.data.frame(importance[1:10,]))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
paper2datapath ="/home/fabs/Data/paper2data/"
load(file=paste(paper2datapath,"/sampledata_100mgrid.RData",sep="")
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
sampledata <- sqliteGRASS_lenny(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_100m_grid_SGU")
sampledata$geolegen_1 <- as.factor(sampledata$geolegen_1)
local <- unlist(paramsets[1])
local <- local[local %in% names(modeldataoktober)]
paramsets[1] <- list(local)
load(file=paste(paper2datapath,"/sampledata_100mgrid.RData",sep=""))
cl1= "SB"
dependent="correct"
relevantmodeldata <- modeldataoktober[(modeldataoktober$SGU_kartiert == as.character(cl1)),]
relevantmodeldata$correct <- ifelse(relevantmodeldata$SGU_kartiert == relevantmodeldata$SGU_gk,1,0)
relevantmodeldata$correct<-as.factor(relevantmodeldata$correct)
summary(relevantmodeldata$correct)
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
roughimp <- increaseacc(modeldata = relevantmodeldata,pset = 3,dependent = dependent)
localimp <- increaseacc(modeldata = relevantmodeldata,pset = 1,dependent = dependent)
par(mfcol=c(1,3))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),dependent)],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(roughimp)[1]),dependent)],as.formula(paste(as.character(rownames(roughimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(roughimp)[1]))
boxplot(data=relevantmodeldata[c(as.character(rownames(localimp)[1]),dependent)],as.formula(paste(as.character(rownames(localimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
cl1="SB"
cl2="TG"
dependent="SGU_kartiert"
relevantmodeldata <- modeldataoktober[modeldataoktober$SGU_kartiert %in% c(cl1,cl2),]
relevantmodeldata$SGU_kartiert <- droplevels(relevantmodeldata$SGU_kartiert)
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesroughnessp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesiteslocalterrainp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
boxplot(data=relevantmodeldata[c("TRI_hr_ws43",dependent)],as.formula(paste("TRI_hr_ws43","~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(localimp)[1]))
cl1="SB"
cl2="TG"
dependent="geolegen_1"
relevantmodeldata <- sampledata[sampledata$geolegen_1 %in% c(cl1,cl2),]
relevantmodeldata$geolegen_1<- as.factor(relevantmodeldata$geolegen_1)
#evaluateforwardCV_anyerror(mypath = paste("/home/fabs/PROJECTP2/data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
allimp <- increaseacc(modeldata = relevantmodeldata,pset = 5,dependent = dependent)
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesroughnessp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),"SGU_kartiert")],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
boxplot(data=relevantmodeldata[c(as.character(rownames(allimp)[1]),"SGU_kartiert")],as.formula(paste(as.character(rownames(allimp)[1]),"~ ", dependent,sep=" ")),outline=T,main=as.character(rownames(allimp)[1]))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
evaluateforwardCV_anyerror(mypath = paste(proj2path,"data2017/temprdata/RanFor_1on1_5foldprofilesitesallpredsp3/",cl1,"_vs_",cl2,sep=""),kk = 1:5,endround = 3,error = "cverror",geheim="geheimerprederror",yrange=c(0,0.5))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
paper2datapath ="/media/fabs/Volume/01_PAPERZEUG/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernsSDruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernsSDruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
myfunctions <- getURL("https://raw.githubusercontent.com/fernsSDruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
modeldataoktober$SGU_gk <- factor(modeldataoktober$SGU_gk,levels=levels(legend$SGU))
modeldataoktober$SGU_kartiert <- factor(modeldataoktober$SGU_kartiert,levels=levels(legend$SGU))
profile <- sqliteGRASS_delilah(location="EPPAN_vhr",mapset = "paper3data_predictparentmaterial",vector = "paper3data_predictparentmaterial_Profilpunktemitboden_UTM")
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(knitr)
proj2path="/home/fabs/PROJECTP2/"
paper2datapath ="/home/fabs/Data/paper2data/"
#proj2path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP2/"
#paper2datapath ="/media/fabs/Volume/01_PAPERZEUG/paper2data/"
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
legend <- read.table(paste(proj2path,"data2017/SGU_legend_new.txt",sep=""),sep="\t",header=T)
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
?barplot
load("/home/fabs/PROJECTP2/data2017/boden_SGU_Oct5.RData")
barplot(boden_SGU$TYP)
barplot(table(boden_SGU$TYP))
barplot(table(boden_SGU$TYP),las=2)
barplot(table(boden_SGU$TYP),las=2,cex.names=0.5)
barplot(table(boden_SGU$TYP),las=2,cex.names=0.5,ylim=c(0,200))
svg("/home/fabs/PROJECTP2/figure/studyarea_statistics/barplot_bodentypen.svg")
barplot(table(boden_SGU$TYP),las=2,cex.names=0.5,ylim=c(0,200))
dev.off()
load(paste(proj2path,"data2017/modeldata_SGUkartier.RData"))
load(paste(proj2path,"data2017/modeldata_SGUkartier.RData",sep=""))
paste(proj2path,"data2017/modeldata_SGUkartier.RData",sep="")
load(paste(proj2path,"data2017/modeldata_SGUkartiert.RData",sep=""))
load(paste(proj2path,"data2017/modeldata_sGUkartiert.RData",sep=""))
View(modeldataoktober)
threeportions <- c(17,40,43)
threebreaks <- c(0.002,0.05,2)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
require(curl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
require(Curl)
require(curl)
require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
breakslog <- log10(breaks)
myspline <- spline(breakslog,summenlinie(portions),xout=c(seq(from=range(x)[1],to=range(x)[2],length.out = 10),log10(0.063)))
myspline <- spline(breakslog,summenlinie(portions),xout=c(seq(from=range(breakslog)[1],to=range(breakslog)[2],length.out = 10),log10(0.063)))
y=summenlinie(portions)
plot(x=breakslog,y=y,type = "b",ylim=c(0,100))
lines(myspline$x,myspline$y,col="blue")
myspline <- spline(breakslog,y),xout=c(seq(from=range(breakslog)[1],to=range(breakslog)[2],length.out = 10),log10(0.063))
myspline <- spline(breakslog,y),xout=c(seq(from=range(breakslog)[1],to=range(breakslog)[2],length.out = 10),log10(0.063))
myspline <- spline(breakslog,y,xout=c(seq(from=range(breakslog)[1],
to=range(breakslog)[2],
length.out = 10),
log10(0.063)))
splinedf <- as.data.frame(myspline)
View(splinedf)
par(mfcol=c(2,1))
plot(x=breakslog,y=y,type = "b",ylim=c(0,100))
plot(x=breakslog,y=y,type = "b",ylim=c(0,100))
par(mfcol=c(1,2))
plot(x=breakslog,y=y,type = "b",ylim=c(0,100))
lines(myspline$x,myspline$y,col="blue")
plot(x=breaks,y=y)
plot(x=breakslog,y=y,type = "b",ylim=c(0,100))
lines(myspline$x,myspline$y,col="blue")
plot(x=breaks,y=y,type="b")
lines(x=10^myspline$x,y=myspline$y,col="blue")
lines(x=10^myspline$x[1:10],y=myspline$y[1:10],col="blue")
plot(x=breakslog,y=y,type = "b",ylim=c(0,100))
lines(myspline$x,myspline$y,col="blue")
plot(x=breaks,y=y,type="b")
lines(x=10^myspline$x[1:10],y=myspline$y[1:10],col="blue")
schluffneu <- splinedf[11,]$y -threeportions[1]
schluffneu <- splinedf[11,]$y -portions[1]
schluff_oe <- function(portions,breaks){
breakslog <- log10(breaks)
y=summenlinie(portions)
myspline <- spline(breakslog,y,xout=c(seq(from=range(breakslog)[1],
to=range(breakslog)[2],
length.out = 10),
log10(0.063)))
par(mfcol=c(1,2))
plot(x=breakslog,y=y,type = "b",ylim=c(0,100))
lines(myspline$x,myspline$y,col="blue")
plot(x=breaks,y=y,type="b")
lines(x=10^myspline$x[1:10],y=myspline$y[1:10],col="blue")
splinedf <- as.data.frame(myspline)
schluffneu <- splinedf[11,]$y -portions[1]
return(schluffneu)
}
schluff_oe(portions = portions,breaks=breaks)
schluff_oe(portions = portions,breaks=breaks)
schluff_oe(portions = portions,breaks=breaks)
require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
schluff_oe(portions = portions,breaks=breaks)
##  Horizont Ap2
portions <- c(17,41,11,31)
breaks <- c(0.002,0.05,0.1,2)
schluff_oe(portions = portions,breaks=breaks)
#######################################################
##  Horizont Ap3
portions <- c(16,37,11,36)
breaks <- c(0.002,0.05,0.1,2)
schluff_oe(portions = portions,breaks=breaks)
#######################################################
##  Horizont C
portions <- c(6,36,14,44)
breaks <- c(0.002,0.05,0.1,2)
schluff_oe(portions = portions,breaks=breaks)
#######################################################
100-17-44
round(40.63)
round(40.49)
View(plottexturtriangle)
View(textur_oe)
t=portions[1]
s=100-t-u
schluff_oe <- function(portions,breaks){
breakslog <- log10(breaks)
y=summenlinie(portions)
myspline <- spline(breakslog,y,xout=c(seq(from=range(breakslog)[1],
to=range(breakslog)[2],
length.out = 10),
log10(0.063)))
par(mfcol=c(1,2))
plot(x=breakslog,y=y,type = "b",ylim=c(0,100))
lines(myspline$x,myspline$y,col="blue")
plot(x=breaks,y=y,type="b")
lines(x=10^myspline$x[1:10],y=myspline$y[1:10],col="blue")
splinedf <- as.data.frame(myspline)
u <- round(splinedf[11,]$y -portions[1])
t=portions[1]
s=100-t-u
textur <- c(t,u,s)
return(textur)
}
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
schluff_oe(portions = portions,breaks=breaks)
portions <- c(17,41,11,31)
breaks <- c(0.002,0.05,0.1,2)
schluff_oe(portions = portions,breaks=breaks)
portions <- c(16,37,11,36)
breaks <- c(0.002,0.05,0.1,2)
schluff_oe(portions = portions,breaks=breaks)
portions <- c(6,36,14,44)
breaks <- c(0.002,0.05,0.1,2)
schluff_oe(portions = portions,breaks=breaks)
require(RCurl)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
schluff_oe(portions = portions,breaks=breaks)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
##  Horizont Ap1
portions <- c(17,40,11,32)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
##  Horizont Ap2
portions <- c(17,41,11,31)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
##  Horizont Ap3
portions <- c(16,37,11,36)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
##  Horizont C
portions <- c(6,36,14,44)
breaks <- c(0.002,0.05,0.1,2)
textur <- schluff_oe(portions = portions,breaks=breaks)
textur
textur_oe(t=textur[1],u=textur[2])
#######################################################
setwd("/home/fabs/PROJECTP3/")
