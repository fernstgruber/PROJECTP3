require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
proj3path="/home/fabs/PROJECTP3"
#proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
mdata <- merge(mdata,geomdata,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
mdata <- merge(mdata,geomdata,by.x="profilnummer",by.y="ID",all.x=T)
dependentlist
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
mdata <- merge(mdata,geomdata,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[10]
#for (dependent in dependentlist[10]){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- c(allpreds,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
paramsets[[6]] <- geomcols
paramsetnames[6] <- 'geoms'
allpreds <- c(localterrain,regionalterrain,roughness,heights,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
#save(origmodeldata,paramsets,paramsetnames,dependent,file=paste("./data/modeldata/RForigmodeldatawithgeoandgeom_",dependent,".RData",sep="")) }
psets <- c(1)
classes <-  levels(origmodeldata[[dependent]])
#save(classes,paramsets,modeldata,paramsetnames,file="classesandparamsets.RData")
#paramsetnames = paramsetnames[psets]
#paramsets = paramsets[psets]
n=1
p=paramsets[psets]
#p=paramsets[1]
#for (p in paramsets){
predset_name <- paramsetnames[n]
preds <- unlist(p)
preds <- preds[preds %in% allpreds]
predset= c(preds)
mymodeldata <- origmodeldata[c(dependent,predset)]
folds = sample(rep(1:5, length = nrow(mymodeldata)))
tt=1:6 #number of best parameters in combination
mydir=paste("./data/RFwithgeoandgeom_fw_5fold_6p_",dependent,"_",predset_name,sep="")
dir.create(mydir)
#############################################################################################################################
#############################################################################################################################
k=5
for(k in 1:5){
kmodeldata=mymodeldata[folds != k,]
ktestdata =  mymodeldata[folds == k,]
summary(kmodeldata[dependent])
summary(ktestdata[dependent])
}
summary(origmodeldata[dependent])
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
setwd(proj3path)
load(file="./data/preppeddata.RData")
load(file="./data/SGUinfo.RData")
load(file="./data/geomorphoninfo.RData")
#myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
#eval(parse(text = myfunctions))
allpreds <- c(localterrain,regionalterrain,roughness,heights)
paramsets <- list(localterrain,regionalterrain,roughness,heights,allpreds)
paramsetnames <- c("localterrain","regionalterrain","roughness","heights","allpreds")
dependentlist=names(preppeddata)[36:50]
allpreds <- c(localterrain,regionalterrain,roughness,heights)
allpreds <- c(allpreds[allpreds %in% names(preppeddata)])
mdata <- preppeddata[c("profilnummer",dependentlist,allpreds)]
nadata <- na.omit(mdata)
problempunkte <- mdata[!(mdata$profilnummer %in% nadata$profilnummer),]
mdata <- na.omit(mdata)
mdata$profilnummer %in% SGUinfo$ID
mdata <- merge(mdata,SGUinfo,by.x="profilnummer",by.y="ID",all.x=T)
mdata$profilnummer %in% geomdata$ID
mdata <- merge(mdata,geomdata,by.x="profilnummer",by.y="ID",all.x=T)
#profiledata <- profiledata[profiledata$ID != "12884", ]
dependent = dependentlist[10]
#for (dependent in dependentlist[10]){
mdata[[dependent]] <- droplevels(mdata[[dependent]])
badones <-vector()
for(pp in allpreds){
if(nrow(mdata[is.na(mdata[[pp]]),]) > 0) {
badones <-c(badones,pp)
}
}
for (p in allpreds){
if (summary(mdata[[p]])[5] == 0.0 ) {
badones <- c(badones,p)
}
}
allpreds=allpreds[!(allpreds %in% badones)]
paramsets[[5]] <- c(allpreds,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
regionalterrain <- regionalterrain[regionalterrain %in% allpreds]
paramsets[[2]] <- regionalterrain
roughness <- roughness[roughness %in% allpreds]
roughness <-roughness[roughness %in% names(mdata)]
paramsets[[3]] <- roughness
paramsets[[6]] <- geomcols
paramsetnames[6] <- 'geoms'
allpreds <- c(localterrain,regionalterrain,roughness,heights,"SGU","SGUT_wTGnew","SGUcode_vectorruggedness_hr_ws57_TRI_hr_ws31",geomcols)
allpreds <- allpreds[allpreds %in% names(mdata)]
origmodeldata <- mdata[names(mdata) %in% c(dependent,allpreds)]
#save(origmodeldata,paramsets,paramsetnames,dependent,file=paste("./data/modeldata/RForigmodeldatawithgeoandgeom_",dependent,".RData",sep="")) }
psets <- c(1)
classes <-  levels(origmodeldata[[dependent]])
#save(classes,paramsets,modeldata,paramsetnames,file="classesandparamsets.RData")
#paramsetnames = paramsetnames[psets]
#paramsets = paramsets[psets]
n=1
p=paramsets[psets]
#p=paramsets[1]
#for (p in paramsets){
predset_name <- paramsetnames[n]
preds <- unlist(p)
preds <- preds[preds %in% allpreds]
predset= c(preds)
mymodeldata <- origmodeldata[c(dependent,predset)]
mymodeldata <- mymodeldata[mymodeldata$CO2_Senke != 2,]
mymodeldata$CO2_Senke <- droplevels(mymodeldata$CO2_Senke)
c(1:9,15:10)
knitr::opts_chunk$set(echo = TRUE)
require(e1071)
require(RCurl)
require(repmis)
require(randomForest)
require(rgdal)
myfunctions <- getURL("https://raw.githubusercontent.com/fernstgruber/Rstuff/master/fabiansandrossitersfunctions.R", ssl.verifypeer = FALSE)
eval(parse(text = myfunctions))
#proj3path="/home/fabs/PROJECTP3"
proj3path="/media/fabs/Volume/01_PAPERZEUG/PROJECTP3/"
#setwd(proj3path)
load('../data/dependentlists.RData')
i=1
dep=dependentlist[i]
print(dependentlist_eng[i])
load(paste("../data/modeldata/RForigmodeldatawithgeoandgeom_",dep,".RData",sep=""))
preds <- evaluateforwardCV_anyerror(mypath=paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep=""),kk=1:5,endround = 10,error = "cverror",geheim = "geheimerprederror",yrange=c(0,1))
dep
paste("../data/FSCV/RF_geoandgeom/RFwithgeoandgeom_fw_5fold_6p_",dep,"_allpreds",sep="")
getwd()
setwd(proj3path)
getwd()
